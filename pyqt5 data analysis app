import sys
import os

from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel
from PyQt5.QtCore import Qt

from PyQt5.QtGui import QPixmap
import pandas as pd

path = os.path.dirname(os.path.abspath(__file__))
os.chdir(path)

class DataAnalysisApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setFixedSize(640, 480)
        self.label = QLabel("Drag and drop an Excel file here")
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setPixmap(QPixmap(os.path.join(path, 'sadmo.png')))
        self.label.setStyleSheet("border: 1px solid black;")
        self.pixmap = QPixmap('sadmo.png')
        self.setCentralWidget(self.label)
        self.setStyleSheet("background-color: coral;")
        self.setWindowTitle("Morph Analysis")
        self.show()
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        for url in event.mimeData().urls():
            file_path = url.toLocalFile()
            self.run_data_analysis(file_path)

    def run_data_analysis(self, file_path):
        data = pd.read_csv(file_path)
        class_name = data['class_name']
        if class_name[0] == 'Conidia':
                debris_cleaning = data[data['area'] >= 50]
                picture_totals = debris_cleaning.groupby('file_name').size().reset_index(name='V1')
                clean_names = picture_totals['file_name'].str.slice(stop=-4)
                df_1 = pd.DataFrame({'clean_names': clean_names, 'picture_totals_V1': picture_totals['V1']})
                output = df_1.groupby('clean_names').mean().reset_index()
                sample_id = output['clean_names']
                avg_free_floating_conidia = output['picture_totals_V1']
                final_df_macro = pd.DataFrame({'sample_id': sample_id, 'avg_free_floating_conidia': avg_free_floating_conidia})
                print(final_df_macro)
                
        else:
                grand_total = data.groupby('file_name').agg({'area':'sum'}).reset_index()
                grand_total = grand_total.rename(columns={'area':'grand_total'})
                bumpy = data[data['class_name']=='Bumpy'].groupby('file_name').agg({'area':'sum'}).reset_index()
                bumpy = bumpy.rename(columns={'area':'bumpy'})
                run_id = grand_total['file_name'].str[:-4]
                df_new = pd.merge(grand_total, bumpy, on='file_name')
                percent_bumpy = df_new['bumpy'] / df_new['grand_total']
                resolution = 2073600 #resolution can be adjusted here
                pixels_detected = df_new['grand_total'] / resolution
                df_2 = pd.DataFrame({'run_id': run_id, 'percent_bumpy': percent_bumpy, 'pixels_detected': pixels_detected})
                avg_percent_bumpy = df_2.groupby('run_id')['percent_bumpy'].mean().reset_index()
                avg_pixels_detected = df_2.groupby('run_id')['pixels_detected'].mean().reset_index()
                final_df_bumpy = pd.merge(avg_percent_bumpy, avg_pixels_detected, on='run_id')
                print(final_df_bumpy)
                

if __name__ == '__main__':
    app = QApplication(sys.argv)
    data_analysis_app = DataAnalysisApp()
    data_analysis_app.show()
    sys.exit(app.exec_())
